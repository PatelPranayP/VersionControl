FUNCTION_BLOCK "fbHeartbeatCount2"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bEnable : Bool;   // 1 = run watchdog, 0 = do not run
      nLocalCount : UInt;
      nRemoteCount : UInt;
   END_VAR

   VAR_OUTPUT 
      bOk : Bool;   // Comm ok
   END_VAR

   VAR_IN_OUT 
      sTag : "stHeartbeatCount2";
   END_VAR

   VAR 
      Timeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON_TIME;
      nRemoteCountPrev { S7_SetPoint := 'True'} : UInt := 0;
      Enabled { S7_SetPoint := 'True'} : Bool;
   END_VAR


BEGIN
	// fbHeartbeatCount2 - communications monitoring
	// Monitor a count for liveness. If it does not change within the timeout, it goes to error state
	// Include the local count here so it gets copied up to the HMI too for operator awareness.
	
	// Copy inputs to tag
	#sTag.nRemoteCount := #nRemoteCount;
	#sTag.nLocalCount := #nLocalCount;
	
	// Enable
	#Enabled := #bEnable AND #sTag.bEnable;
	
	// Timeout
	#Timeout(IN := (#sTag.nState = 2), PT := #sTag.tTimeout);
	
	// States
	CASE #sTag.nState OF
	    0: // Idle
	        #sTag.bOk := TRUE;
	        IF #Enabled = TRUE THEN
	            #sTag.nState := 1;
	        END_IF;
	    1: // Update
	        #nRemoteCountPrev := #nRemoteCount;
	        IF #Enabled = FALSE THEN
	            #sTag.nState := 0;
	        ELSE
	            #sTag.nState := 2;
	        END_IF;
	    2: // Wait
	        IF #nRemoteCount <> #nRemoteCountPrev THEN
	            // Pong
	            #sTag.bOk := TRUE;
	            #sTag.nState := 1;
	        ELSIF #Timeout.Q = TRUE THEN
	            #sTag.bOk := FALSE;
	            #sTag.nState := 1;
	        ELSIF #Enabled = FALSE THEN
	            #sTag.nState := 0;
	        END_IF;
	        
	END_CASE;
	
	// Local outputs
	#bOk := #sTag.bOk;
	
	
	
END_FUNCTION_BLOCK

