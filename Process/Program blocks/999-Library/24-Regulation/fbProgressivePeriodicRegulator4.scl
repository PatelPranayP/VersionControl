FUNCTION_BLOCK "fbProgressivePeriodicRegulator4"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bEnable : Bool;   // 1 = enable regulator, 0 = disable regulator
      bReset : Bool;   // 1 = reset everything to zero
      sPV : "stCalcValue";   // Process value
   END_VAR

   VAR_OUTPUT 
      bOutput : Bool;
   END_VAR

   VAR_IN_OUT 
      sTag : "stProgressivePeriodicRegulator4";
   END_VAR

   VAR 
      Controller : "fbPWMController";
   END_VAR

   VAR_TEMP 
      Enabled : Bool;
   END_VAR


BEGIN
	// Progressive periodic regulator (4)
	// Periodic control of an output based on a threshold
	// There is one fixed on-period
	// Auto mode: use a table of thresholds with corresponding periods (4 entries)
	// Manual mode: use a fixed operiod
	// Manual override: force the output on or off
	
	// Copy to tag
	#sTag.fPV := #sPV.fValue;
	
	// Reset manual modes.
	IF #bReset THEN
	    #sTag.bManualMode := FALSE;
	    #sTag.tManualPeriod := T#0s;
	    #sTag.bManualOverride := FALSE;
	    #sTag.bOverrideCmd := FALSE;
	END_IF;
	
	// Controller
	IF #sTag.bManualOverride = TRUE THEN
	    // In manual override, everything is awesome
	    #sTag.bFault := FALSE;
	    #sTag.bOutput := #sTag.bOverrideCmd;
	ELSE
	    // Choose fixed or progressive period
	    IF #sTag.bManualMode = TRUE THEN
	        #sTag.tPeriod := #sTag.tManualPeriod;
	    ELSE
	        IF #sTag.fPV >= #sTag.Param.Limit[0] AND #sTag.fPV < #sTag.Param.Limit[1] THEN
	            #sTag.tPeriod := #sTag.Param.Period[0];
	        ELSIF #sTag.fPV >= #sTag.Param.Limit[1] AND #sTag.fPV < #sTag.Param.Limit[2] THEN
	            #sTag.tPeriod := #sTag.Param.Period[1];
	        ELSIF #sTag.fPV >= #sTag.Param.Limit[2] AND #sTag.fPV < #sTag.Param.Limit[3] THEN
	            #sTag.tPeriod := #sTag.Param.Period[2];
	        ELSIF #sTag.fPV >= #sTag.Param.Limit[3] THEN
	            #sTag.tPeriod := #sTag.Param.Period[3];
	        END_IF;
	    END_IF;
	
	    // Enabled when enabled from process and from HMI (Auto), or in Manual mode
	    #Enabled := (#bEnable AND #sTag.bEnable) OR #sTag.bManualMode;
	
	    // Run controller
	    #Controller(bEnable := #Enabled AND (#sPV.bError = FALSE), 
	                tOnTime := #sTag.tOnTime, 
	                tPeriod := #sTag.tPeriod, 
	                bOut => #sTag.bOutput, 
	                tOnTimeElapsed => #sTag.tOnTimeElapsed, 
	                tPeriodElapsed => #sTag.tPeriodElapsed);
	   
	    // Controller fault
	    #sTag.bFault := #sPV.bError;
	
	END_IF;
	
	// Mode
	IF #sTag.bManualOverride = TRUE THEN
	    #sTag.nMode := 3;
	ELSIF #sTag.bManualMode = TRUE THEN
	    #sTag.nMode := 2;
	ELSIF #sTag.bEnable = TRUE THEN
	    #sTag.nMode := 1;
	ELSE
	    #sTag.nMode := 0;
	END_IF;
	
	// Local outputs
	#bOutput := #sTag.bOutput;
END_FUNCTION_BLOCK

