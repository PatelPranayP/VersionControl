FUNCTION_BLOCK "fbSafetyRelay"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bStatus : Bool;   // Safety relay status 1 = ok, 0 = E-stop
   END_VAR

   VAR_OUTPUT 
      bExternalEstop : Bool;   // External E-stop is active
      bResetFailed : Bool;   // Failed to reset safety relay
   END_VAR

   VAR_IN_OUT 
      sTag : "stSafetyRelay";
   END_VAR

   VAR 
      SequenceTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON_TIME;
      ResetTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      ResetReq {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;   // Make sure command is an edge
   END_VAR


BEGIN
	// Sequencer to reset the safety relay.
	// 1. Close the PLC's E-stop loop output relay
	// 2. Send the reset command to the Safety relay
	// 3. Wait for a positive response, give up after timeout
	
	// Copy status into tag
	#sTag.bStatus := #bStatus;
	
	// Make reset signal an edge to prevent endless retriggering
	#ResetReq(CLK := #sTag.bResetReq);
	
	// Evaluate timers outside state machine so they reset properly
	#SequenceTimer(IN := (#sTag.nState = 1), PT := #sTag.tResetLoopTime);
	#ResetTimeout(IN := (#sTag.nState = 2), PT := #sTag.tResetTimeout);
	
	// Safety relay reset cycle
	CASE #sTag.nState OF
	    0: // Safety relay is tripped/open
	        IF #ResetReq.Q = TRUE THEN
	            #sTag.bResetLoop := TRUE;
	            #sTag.nState := 1;
	            #sTag.bResetFailed := FALSE;
	        ELSIF #bStatus = TRUE THEN
	            // Externally reset
	            #sTag.bResetFailed := FALSE;
	            #sTag.nState := 3;
	        END_IF;
	    1: // Give loop relay time to close
	        IF #SequenceTimer.Q = TRUE THEN 
	            #sTag.bResetCmd := TRUE;
	            #sTag.nState := 2;
	        END_IF;
	    2: // Wait for safety relay feedback or timeout
	        IF #bStatus = TRUE THEN
	            #sTag.bResetLoop := FALSE;
	            #sTag.bResetCmd := FALSE;
	            #sTag.nState := 3;
	        ELSIF #ResetTimeout.Q = TRUE THEN
	            #sTag.bResetLoop := FALSE;
	            #sTag.bResetCmd := FALSE;
	            #sTag.bResetFailed := TRUE;
	            #sTag.nState := 0;
	        END_IF;
	    3: // Safety relay is closed
	        IF #bStatus = FALSE THEN
	            #sTag.nState := 0;
	        END_IF;
	END_CASE;
	
	// Local outputs
	#bExternalEstop := NOT #bStatus;
	#bResetFailed := #sTag.bResetFailed;
	
END_FUNCTION_BLOCK

