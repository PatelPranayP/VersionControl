FUNCTION "1D-Interpolation" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      x_in : Real;
   END_VAR

   VAR_OUTPUT 
      f_out : Real;
   END_VAR

   VAR_IN_OUT 
      X_Array : Array[*] of Real;
      F_Array : Array[*] of Real;
   END_VAR

   VAR_TEMP 
      Xindex_L : DInt;
      X_L : Real;
      X_H : Real;
      F_Lx : Real;
      F_Hx : Real;
      x : Real;
   END_VAR


BEGIN
	#x := #x_in;
	
	"FindIndex"(x:=#x,
	            index_L=>#Xindex_L,
	            Array:=#X_Array);
	(* REGION Find nearest meshpoint (#X_Array[#index_Lx]) smaller than x
	    // If x is closest to the last index or lies beyond, then take the second last index anyway
	    // We use our previous result from last calculation (#LastIndexNr) as startpoint for the search
	    #Xindex_L := #LastXi;
	    IF #Xindex_L > 0 AND #x < #X_Array[#Xindex_L] THEN
	        //Suche nach links (kleinere indizes)
	        WHILE #Xindex_L > 0 AND #x < #X_Array[#Xindex_L - 1] DO
	            #Xindex_L -= 1;
	            IF #Xindex_L = 0 THEN
	                EXIT;
	            END_IF;
	        END_WHILE;
	    ELSE
	        //Suche nach rechts (größere indizes)
	        WHILE #Xindex_L < (#Count_Xi - 1) AND #x > #X_Array[#Xindex_L + 1] DO
	            #Xindex_L += 1;
	        END_WHILE;
	    END_IF;
	END_REGION *)
	
	
	REGION interpolation points    
	    // The interpolation points are:
	    #X_L := #X_Array[#Xindex_L];   //The largest meshpoint smaller larger than x (< Count_X-1)
	    #X_H := #X_Array[#Xindex_L + 1]; //The smalles meshpoint bigger larger than x  (>= 1)
	    #F_Lx := #F_Array[#Xindex_L];  // Function value of X_L
	    #F_Hx := #F_Array[#Xindex_L + 1];// Function value of X_H
	    IF #X_L >= #X_H THEN // The lookup has rise strictly monotonously
	        ENO := 1;
	        #f_out := "NaN"();
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION inerpolation
	    //Calculate interpolation inbetween or beyond X_L and X_H
	    #f_out := (#F_Hx - #F_Lx) / (#X_H - #X_L) * (#x - #X_L) + #F_Lx;
	END_REGION
	
END_FUNCTION

