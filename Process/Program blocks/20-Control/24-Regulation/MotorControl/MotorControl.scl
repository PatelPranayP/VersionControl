FUNCTION_BLOCK "MotorControl"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      PerformanceSetpoint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // [%] Performance rate
      FastStop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // 1 = execute a fast stop, 0 = do nothing
   END_VAR

   VAR 
      NEngineRequest { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // [rpm]
      NEngineSetpoint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // [rpm]
      InverterRun { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      InverterReady { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      HydrolockProtection { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      A3400 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "fbHMIEvent";
   END_VAR

   VAR_TEMP 
      PerformanceSetpointSelected : Real;   // [%] Selected performance setpoint
   END_VAR


BEGIN
	// Select motor setpoint and handle ready & run signals
	// NOTE: ramps are hardcoded, this is not ideal, should be in DB_CurrentSettings somewhere to make it easier to set up a new machine
	
	IF "DB_System".bEmergencyStop = TRUE THEN
	    #NEngineSetpoint := 0.0;
	ELSE
	    // Select setpoint
	    IF "DB_Regulators".PerformanceControl.ManualMode.ForcePowerSetpoint = TRUE THEN 
	        #PerformanceSetpointSelected := "DB_Regulators".PerformanceControl.ManualMode.ForcePowerSetpointValue;
	    ELSE
	        #PerformanceSetpointSelected := #"PerformanceSetpoint";
	    END_IF;
	
	    // Scale setpoint to RPM
	    #NEngineRequest := #PerformanceSetpointSelected / 100.0 * "DB_CurrentSetting".MissingSetting.Compressor.MaxOperationalSpeed;
	
	    // Limit setpoint
	    #NEngineRequest := LIMIT(IN := #NEngineRequest,
	                             MN := "DB_CurrentSetting".MissingSetting.Compressor.MinOperationalSpeed,
	                             MX := "DB_CurrentSetting".MissingSetting.Compressor.MaxOperationalSpeed);
	
	    CASE "DB_State".State.State_Number OF
	        0..1: // Init, offline modes
	            #NEngineSetpoint := 0.0;
	            #InverterReady := FALSE;
	            #InverterRun := FALSE;
	        2: // Standby
	            // If coming from one of the running modes, ramp down and stop
	            "RampLimiter"(InputValue            := 0.0,
	                          "PositivChange per_s" := 0.0,
	                          "NegativChange per_s" := -50.0,
	                          fCycleTime            := "DB_System".fCycleTime,
	                          OutputValue           := #NEngineSetpoint);
	            IF "DB_State".RunningConditions.CompressorStopped = TRUE THEN
	                #InverterReady := FALSE;
	                #InverterRun := FALSE;
	            END_IF;
	        3:  // PrepareStart
	            #NEngineSetpoint := 0.0;
	            #InverterReady := TRUE;
	        4:  // Start
	            IF "DB_State".RunningConditions.DoWarmStart = TRUE OR "DB_Regulators".PurgeControl.bDone = TRUE THEN
	                #InverterRun := TRUE;
	                // Preset the speed
	                #NEngineSetpoint := MAX(IN1 := #NEngineSetpoint, IN2 := "DB_CurrentSetting".MissingSetting.Compressor.MinStartupSpeed);   
	                "RampLimiter"(InputValue            := "DB_CurrentSetting".MissingSetting.System.HydrolockSpeed,                                  
	                              "PositivChange per_s" := 60.0,
	                              "NegativChange per_s" := -50.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            ELSE
	                // Note: Purge Control handles its own ramping
	                #NEngineSetpoint := "DB_Regulators".PurgeControl.fSpinOut;
	                #InverterRun := ("DB_Regulators".PurgeControl.nMode = 1);   // Don't touch
	            END_IF;
	
	            
	        5:  // Warmup
	            IF "DB_State".RunningConditions.RiskOfHydrolock = TRUE THEN
	                "RampLimiter"(InputValue            := MIN(IN1 := #NEngineSetpoint, IN2 := "DB_CurrentSetting".MissingSetting.System.HydrolockSpeed),
	                              "PositivChange per_s" := 0.0,
	                              "NegativChange per_s" := -500.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            ELSE
	                // Preset the speed
	                #NEngineSetpoint := MAX(IN1 := #NEngineSetpoint, IN2 := "DB_CurrentSetting".MissingSetting.Compressor.MinOperationalSpeed);
	                "RampLimiter"(InputValue := MIN(IN1 := "DB_CurrentSetting".MissingSetting.Compressor.WarmupSpeed, IN2 := #NEngineRequest),
	                              "PositivChange per_s" := 15.0,
	                              "NegativChange per_s" := -50.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            END_IF;
	        6:  // Running
	            IF "DB_State".RunningConditions.RiskOfHydrolock = TRUE THEN
	                "RampLimiter"(InputValue            := MIN(IN1 := #NEngineSetpoint, IN2 := "DB_CurrentSetting".MissingSetting.System.HydrolockSpeed),
	                              "PositivChange per_s" := 0.0,
	                              "NegativChange per_s" := -500.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            ELSE
	                "RampLimiter"(InputValue            := #NEngineRequest,
	                              "PositivChange per_s" := 30.0,
	                              "NegativChange per_s" := -30.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            END_IF;
	        7:  // Stopping
	            IF #FastStop = TRUE THEN
	                // Unconditional rampdown
	                "RampLimiter"(InputValue            := 0.0,
	                              "PositivChange per_s" := 0.0,
	                              "NegativChange per_s" := -500.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            ELSIF "DB_State".RunningConditions.SuctionLineDry = FALSE THEN
	                // Dry suction line at lower speed
	                "RampLimiter"(InputValue            := "DB_CurrentSetting".MissingSetting.Compressor.MinOperationalSpeed,
	                              "PositivChange per_s" := 60.0,
	                              "NegativChange per_s" := -50.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            ELSE
	                // Normal rampdown
	                "RampLimiter"(InputValue            := 0.0,
	                              "PositivChange per_s" := 0.0,
	                              "NegativChange per_s" := -50.0,
	                              fCycleTime            := "DB_System".fCycleTime,
	                              OutputValue           := #NEngineSetpoint);
	            END_IF;
	    END_CASE;
	
	END_IF;
	
	// Assign to inverter bits
	"DB_InverterDrives".HBL_SC_10.Cmd.bReady := #InverterReady;
	"DB_InverterDrives".HBL_SC_10.Cmd.bRun := #InverterRun;
	
END_FUNCTION_BLOCK

